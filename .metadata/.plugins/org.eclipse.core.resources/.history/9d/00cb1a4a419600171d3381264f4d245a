
public class Strings {

	public static void main(String[] args) {
		String str = "stringing";
		
		// common static methods
		System.out.println(str.charAt(1)); // char at index -- t
		System.out.println(str.indexOf("r")); // index of char -- 2
		System.out.println(str.indexOf("ing")); // index of substring -- 3
		System.out.println(str.lastIndexOf("g")); // index of char -- 8
		System.out.println(str.substring(2, 5)); // substring -- rin
		System.out.println(str.length()); // 9
		
		// common ways to create a string
		String str1 = new String("This is a string."); // creates obj--too verbose
		String str2 = "This is a string."; //creates obj--preferred
		
		// string from chars
		char[] charArray = {'T', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 't', 'r', 'i', 'n', 'g', '.'};
		String str3 = new String(charArray);
		System.out.println(str3); // This is a string.
		
		// immutability--strings are immutable objects
		String str4 = "some string";
		str4 = "some new string";
		
		// although "str4" points to "some new string", the string "some string" that "str4" previously pointed to 
		// still exists in memory although it cannot be accessed anymore--it is unreferenced by the JVM but it is not changed
		System.out.println(str4); // some new string
		
		// interned strings
		String str5 = "another string";
		String str6 = "another string";
		String str7 = new String("another string");
		System.out.println(str5==str6);// true--string is interned for better performance
		System.out.println(str5==str7);// false--strings point to differente objects
		
		
	}
}
